package com.freeSite.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.freeSite.business.abstracts.JobSeekerService;
import com.freeSite.business.dtos.requests.CreateRequests.CreateJobSeekerRequest;
import com.freeSite.business.dtos.requests.UpdateRequests.UpdateJobSeekerRequest;
import com.freeSite.business.dtos.responses.GetAllJobSeekerResponse;
import com.freeSite.business.rules.JobSeekerBusinessRules;
import com.freeSite.core.mappers.ModelMapperService;
import com.freeSite.core.results.DataResult;
import com.freeSite.core.results.Result;
import com.freeSite.core.results.SuccessDataResult;
import com.freeSite.core.results.SuccessResult;
import com.freeSite.dataAccess.abstracts.JobSeekerRepository;
import com.freeSite.entities.JobSeeker;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class JobSeekerManager implements JobSeekerService {

	private final JobSeekerRepository jobSeekerRepository;
	private ModelMapperService modelMapper;
	private JobSeekerBusinessRules businesRules;

	@Override
	public Result add(CreateJobSeekerRequest jobSeekerRequest) throws Exception {
		this.businesRules.checkIfEMailExist(jobSeekerRequest.getEmail());
		
		JobSeeker jobSeeker = this.modelMapper.forRequest().map(jobSeekerRequest, JobSeeker.class);
		this.jobSeekerRepository.save(jobSeeker);
		return new SuccessResult("Data eklendi");
	}

	@Override
	public DataResult<List<GetAllJobSeekerResponse>> getAll() {
		List<JobSeeker> jobSeekers = this.jobSeekerRepository.findAll();
		List<GetAllJobSeekerResponse> responses = jobSeekers.stream()
				.map(jobSeeker -> this.modelMapper.forResponse().map(jobSeeker, GetAllJobSeekerResponse.class))
				.collect(Collectors.toList());
		return new SuccessDataResult<List<GetAllJobSeekerResponse>>(responses, "Data Listelendi");
	}

	@Override
	public Result deleteById(int id) throws Exception {
		this.businesRules.checkIfJobSeekerExists(id);
		this.jobSeekerRepository.deleteById(id);
		return new SuccessResult("Data Silindi!");
	}

	@Override
	public Result update(UpdateJobSeekerRequest jobSeekerRequest) throws Exception {
		this.businesRules.checkIfJobSeekerExists(jobSeekerRequest.getId());

		this.businesRules.checkIfEmailExist(jobSeekerRequest.getEmail());

		JobSeeker jobSeeker = this.modelMapper.forRequest().map(jobSeekerRequest, JobSeeker.class);

		this.jobSeekerRepository.save(jobSeeker);

		return new SuccessResult("Data g√ºncellendi!");
	}

}
