package com.freeSite.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.freeSite.business.abstracts.EmployerService;
import com.freeSite.business.dtos.requests.CreateRequests.CreateEmployerRequest;
import com.freeSite.business.dtos.requests.DeleteRequests.DeleteEmployerRequest;
import com.freeSite.business.dtos.requests.UpdateRequests.UpdateEmployerRequest;
import com.freeSite.business.dtos.responses.GetAllEmployerResponse;
import com.freeSite.business.rules.EmployerBusinessRules;
import com.freeSite.core.mappers.ModelMapperService;
import com.freeSite.core.results.DataResult;
import com.freeSite.core.results.Result;
import com.freeSite.core.results.SuccessDataResult;
import com.freeSite.core.results.SuccessResult;
import com.freeSite.dataAccess.abstracts.EmployerRepository;
import com.freeSite.entities.Employer;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class EmployerManager implements EmployerService {

	private final EmployerRepository employerRepository;
	private final ModelMapperService modelMapper;
	private final EmployerBusinessRules businessRules;

	@Override
	public Result add(CreateEmployerRequest employerRequest) throws Exception {

		this.businessRules.checkIfEMailExist(employerRequest.getEmail());

		Employer employer = this.modelMapper.forRequest().map(employerRequest, Employer.class);
		this.employerRepository.save(employer);
		return new SuccessResult("Veri eklendi");
	}

	@Override
	public Result update(UpdateEmployerRequest employerjobRequest) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Result deleteById(DeleteEmployerRequest employerRequest) throws Exception {
		this.businessRules.checkIfEmployerExists(employerRequest.getId());
		this.employerRepository.deleteById(employerRequest.getId());	
		return new SuccessResult("Veri Silindi");
	}

	@Override
	public DataResult<List<GetAllEmployerResponse>> getAll() {
		List<Employer> employers = this.employerRepository.findAll();
		List<GetAllEmployerResponse> responses = employers.stream()
				.map(employer -> this.modelMapper.forResponse().map(employer, GetAllEmployerResponse.class))
				.collect(Collectors.toList());

		return new SuccessDataResult<List<GetAllEmployerResponse>>(responses, "Data Listelendi");
	}

}
