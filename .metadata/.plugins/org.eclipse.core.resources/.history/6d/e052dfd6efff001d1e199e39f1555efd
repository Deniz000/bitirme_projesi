package com.freeSite.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.freeSite.business.abstracts.JobPositionService;
import com.freeSite.business.dtos.requests.CreateRequests.CreateJobPositionRequest;
import com.freeSite.business.dtos.requests.UpdateRequests.UpdateJobPositionRequest;
import com.freeSite.business.dtos.responses.GetAllJobPositionResponse;
import com.freeSite.business.rules.JobPositionBusinessRules;
import com.freeSite.core.mappers.ModelMapperService;
import com.freeSite.core.results.DataResult;
import com.freeSite.core.results.Result;
import com.freeSite.core.results.SuccessDataResult;
import com.freeSite.core.results.SuccessResult;
import com.freeSite.dataAccess.abstracts.JobPositionRepository;
import com.freeSite.entities.JobPosition;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class JobPositionManager implements JobPositionService{
	private JobPositionRepository jobPositionRepository;
	private ModelMapperService modelMapperService;
	private JobPositionBusinessRules businessRules;
	
	@Override
	public Result add(CreateJobPositionRequest jobPositionRequest) throws Exception {
		JobPosition jobPosition = this.modelMapperService.forRequest().map(jobPositionRequest, JobPosition.class);
		this.jobPositionRepository.save(jobPosition);
		return new SuccessResult("Data Kaydedildi");
	}

	@Override
	public Result update(UpdateJobPositionRequest jobPositionRequest) throws Exception {
		this.businessRules.checkIfJobPositiionExists(jobPositionRequest.getId());
		JobPosition jobPosition = this.modelMapperService.forRequest().map(jobPositionRequest, JobPosition.class);
		this.jobPositionRepository.save(jobPosition);
		return null;
	}

	@Override
	public Result deleteById(int id) throws Exception {
		this.businessRules.checkIfJobPositiionExists(id);
		this.jobPositionRepository.deleteById(id);
		return new SuccessResult("Data Silindi");
	}

	@Override
	public DataResult<List<GetAllJobPositionResponse>> getAll() {
		List<JobPosition> jobPositions = this.jobPositionRepository.findAll();
		List<GetAllJobPositionResponse> responses = jobPositions.stream()
				.map(jobPosition -> this.modelMapperService.forResponse().map(jobPosition, GetAllJobPositionResponse.class)).collect(Collectors.toList());
		return new SuccessDataResult<List<GetAllJobPositionResponse>>(responses, "Data Listelendi");
	}

}
